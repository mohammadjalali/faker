services:
  zookeeper:
    container_name: faker-zookeeper
    image: confluentinc/cp-zookeeper:7.8.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181

  kafka:
    container_name: faker-kafka
    image: confluentinc/cp-kafka:7.8.0
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://faker-kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 9092 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    restart: always

  elasticsearch:
    container_name: faker-elasticsearch
    image: elasticsearch:7.17.26
    ports:
      - 9200:9200
    environment:
      discovery.type: single-node
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    restart: always

  producer:
    container_name: faker-produer
    build: ./producer/
    depends_on:
      kafka:
        condition: service_healthy
    env_file:
      - .env
    restart: always

  consumer:
    container_name: faker-consumer
    build: ./consumer/
    depends_on:
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - .env

  web:
    container_name: faker-web
    build: ./api/
    ports:
      - 8000:8000
    env_file:
      - .env
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -X 'GET' --fail http://localhost:8000/health/ -H 'accept: application/json' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
